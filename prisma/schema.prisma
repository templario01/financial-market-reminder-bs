// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  password      String?
  phoneNumber   String?        @unique @map("phone_number")
  authProviders AuthProvider[] @default([LOCAL]) @map("auth_providers")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  account       Account?

  @@map("users")
}

model Account {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @default(now()) @updatedAt @map("updated_at")
  alias            String?
  isActive         Boolean             @default(true)
  userId           String              @unique @db.ObjectId
  favoriteQuotes   UserFavoriteQuote[]
  userNotification UserNotification[]
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model UserNotification {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  accountId String               @db.ObjectId
  type      NotificationProvider
  isActive  Boolean              @default(false)
  account   Account              @relation(fields: [accountId], references: [id])

  @@unique([accountId, type])
  @@index([accountId])
  @@map("user_notifications")
}

model VerificationCode {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  code            String
  associatedEmail String   @unique @map("associated_email")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  expirationTime  DateTime @map("expiration_time")

  @@map("verification_codes")
}

model UserFavoriteQuote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quoteId   String   @db.ObjectId
  createdAt DateTime @default(now())
  accountId String   @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id])
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@unique([accountId, quoteId])
  @@map("user_favorite_quotes")
}

model Quote {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  ticker            String              @unique
  description       String
  imageUrl          String?             @map("image_url")
  type              String
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at")
  prices            QuotePrice[]
  UserFavoriteQuote UserFavoriteQuote[]

  @@map("quotes")
}

model QuotePrice {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  quoteId       String   @map("quote_id") @db.ObjectId
  currentPrice  Float    @map("current_price")
  change        Float
  percentChange Float    @map("percent_change")
  high          Float
  low           Float
  open          Float
  previousClose Float    @map("previoud_close")
  createdAt     DateTime @default(now()) @map("created_at")
  quote         Quote    @relation(fields: [quoteId], references: [id])

  @@index([quoteId, createdAt])
  @@map("quote_prices")
}

enum AuthProvider {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum NotificationProvider {
  EMAIL
  PUSH
  WHATSAPP
}
